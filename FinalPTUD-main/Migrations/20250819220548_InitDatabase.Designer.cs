// <auto-generated />
using System;
using BusTicketBooking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusTicketBooking.Migrations
{
    [DbContext(typeof(BusDbContext))]
    [Migration("20250819220548_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusTicketBooking.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Hà Nội"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Hồ Chí Minh"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Đà Nẵng"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Hải Phòng"
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Cần Thơ"
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Nha Trang"
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Huế"
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Vinh"
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Đà Lạt"
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Quy Nhơn"
                        },
                        new
                        {
                            CityId = 11,
                            CityName = "Thanh Hóa"
                        },
                        new
                        {
                            CityId = 12,
                            CityName = "Cà Mau"
                        },
                        new
                        {
                            CityId = 13,
                            CityName = "Thái Nguyên"
                        },
                        new
                        {
                            CityId = 14,
                            CityName = "Buôn Ma Thuột"
                        },
                        new
                        {
                            CityId = 15,
                            CityName = "Phan Thiết"
                        },
                        new
                        {
                            CityId = 16,
                            CityName = "Vũng Tàu"
                        },
                        new
                        {
                            CityId = 17,
                            CityName = "Long Xuyên"
                        },
                        new
                        {
                            CityId = 18,
                            CityName = "Rạch Giá"
                        },
                        new
                        {
                            CityId = 19,
                            CityName = "Bạc Liêu"
                        },
                        new
                        {
                            CityId = 20,
                            CityName = "Sóc Trăng"
                        });
                });

            modelBuilder.Entity("BusTicketBooking.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("TicketId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"), 1L, 1);

                    b.Property<int>("DepartureCityId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.HasKey("RouteId");

                    b.HasIndex("DepartureCityId");

                    b.HasIndex("DestinationCityId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReturnSeatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnTripId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ReturnTripId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BusTicketBooking.Models.TicketSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketSeat");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("BusTicketBooking.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Payment", b =>
                {
                    b.HasOne("BusTicketBooking.Models.Ticket", "Ticket")
                        .WithMany("Payments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Route", b =>
                {
                    b.HasOne("BusTicketBooking.Models.City", "DepartureCity")
                        .WithMany("DepartureRoutes")
                        .HasForeignKey("DepartureCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusTicketBooking.Models.City", "DestinationCity")
                        .WithMany("DestinationRoutes")
                        .HasForeignKey("DestinationCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartureCity");

                    b.Navigation("DestinationCity");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Ticket", b =>
                {
                    b.HasOne("BusTicketBooking.Models.Trip", "ReturnTrip")
                        .WithMany()
                        .HasForeignKey("ReturnTripId");

                    b.HasOne("BusTicketBooking.Models.Trip", "Trip")
                        .WithMany("Tickets")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketBooking.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnTrip");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicketBooking.Models.TicketSeat", b =>
                {
                    b.HasOne("BusTicketBooking.Models.Ticket", "Ticket")
                        .WithMany("SeatNumber")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Trip", b =>
                {
                    b.HasOne("BusTicketBooking.Models.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusTicketBooking.Models.City", b =>
                {
                    b.Navigation("DepartureRoutes");

                    b.Navigation("DestinationRoutes");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Route", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Ticket", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SeatNumber");
                });

            modelBuilder.Entity("BusTicketBooking.Models.Trip", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicketBooking.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
