@model BusTicketBooking.Models.Trip
@{
    ViewData["Title"] = "ƒê·∫∑t v√©";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="seatAlert" class="alert alert-warning alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index:1050; display:none;">
    <span id="seatAlertMessage"></span>
    <button type="button" class="btn-close" onclick="hideSeatAlert()"></button>
</div>

<h3>ƒê·∫∑t v√©: @Model.BusName (@Model.Route!.DepartureCity?.CityName ‚Üí @Model.Route!.DestinationCity?.CityName)</h3>
<p>Kh·ªüi h√†nh: @Model.DepartureTime.ToString("HH:mm dd/MM/yyyy") - Gi√°: @Model.Price.ToString("n0") ƒë</p>
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<style>
    .seat-layout {
        display: flex;
        gap: 40px;
        align-items: stretch; /* B√™n tr√°i v√† ph·∫£i cao b·∫±ng nhau */
        justify-content: center;
        margin-top: 20px;
    }

    .seat-left {
        flex: 2;
        display: flex;
        gap: 20px;
    }

    .seat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        border: 2px solid #eee;
        border-radius: 10px;
        padding: 15px;
        background: #f9f9f9;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    .bus-container {
        display: flex;
        justify-content: center;
        gap: 80px; /* kho·∫£ng c√°ch gi·ªØa 2 d√£y gh·∫ø */
        margin-bottom: 20px;
    }

    .seat-column {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .seat {
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        user-select: none;
        transition: background-color 0.2s;
    }

        .seat.available {
            background-color: #DFF3FF;
        }

        .seat.selected {
            background-color: #FDEDE8;
        }

        .seat.booked {
            background-color: #D5D9DD;
            cursor: not-allowed;
        }

    .submit-button {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-success {
        padding: 10px 20px;
        font-size: 16px;
    }

    .info-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .card {
        border: 2px solid #eee;
        border-radius: 10px;
        padding: 15px 20px;
        background: #f9f9f9;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

</style>
<div class="seat-layout">
    <div class="seat-left">
      <div class="seat-container" style="display:flex; flex-direction:row; gap:20px; padding:15px; border:2px solid #eee; border-radius:10px; background:#f9f9f9; align-items:flex-start;">
    <!-- Gh·∫ø + form -->
    <div style="flex:1; display:flex; flex-direction:column; gap:15px;">
        <div class="bus-container" id="seatGrid" style="min-width:300px; min-height:200px;"></div>
        <form method="post" id="bookingForm" class="submit-button" asp-controller="Tickets" asp-action="Book">
            <input type="hidden" name="seatNumbers" id="seatNumbers" />
            <button type="submit" class="btn btn-success" id="submitButton" disabled>X√°c nh·∫≠n ƒë·∫∑t</button>
        </form>
    </div>

    <!-- Legend -->
    <div class="legend" style="display:flex; flex-direction:column; gap:10px; min-width:100px;">
        <div style="display:flex; align-items:center; gap:6px;">
            <div class="seat booked" style="width:28px; height:28px;"></div> <span>ƒê√£ b√°n</span>
        </div>
        <div style="display:flex; align-items:center; gap:6px;">
            <div class="seat available" style="width:28px; height:28px;"></div> <span>C√≤n tr·ªëng</span>
        </div>
        <div style="display:flex; align-items:center; gap:6px;">
            <div class="seat selected" style="width:28px; height:28px;"></div> <span>ƒêang ch·ªçn</span>
        </div>
    </div>
</div>


    </div>

    <!-- B√™n ph·∫£i: th√¥ng tin chuy·∫øn ƒëi + chi ti·∫øt gi√° -->
    <div class="info-area">
        <div class="card">
            <h4>Th√¥ng tin l∆∞·ª£t ƒëi</h4>
            <p><b>Tuy·∫øn xe:</b> @Model.Route.DepartureCity.CityName - @Model.Route.DestinationCity.CityName</p>
            <p><b>Th·ªùi gian xu·∫•t b·∫øn:</b> @Model.DepartureTime.ToString("HH:mm dd/MM/yyyy")</p>
            <p><b>S·ªë l∆∞·ª£ng gh·∫ø:</b> <span id="seatCount">0</span> Gh·∫ø</p>
            <p><b>S·ªë gh·∫ø:</b> <span id="seatList">-</span></p>
            <p><b>T·ªïng ti·ªÅn l∆∞·ª£t ƒëi:</b> <span id="totalPriceTop">0</span>ƒë</p>
        </div>

        <div class="card">
            <h4>Chi ti·∫øt gi√° <span style="color:orange;">&#9432;</span></h4>
            <p><b>Gi√° v√© l∆∞·ª£t ƒëi:</b> <span id="totalPriceDetail">0</span>ƒë</p>
            <p><b>Ph√≠ thanh to√°n:</b> 0ƒë</p>
            <hr>
            <p><b>T·ªïng ti·ªÅn:</b> <span id="totalPriceBottom">0</span>ƒë</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedSeats = [];

                      async function loadBookedSeats() {
            try {
                const response = await fetch(`/Tickets/GetBookedSeats?tripId=@Model.TripId&ts=${Date.now()}`, {
                    cache: "no-store"
                });
                const seats = await response.json();
                console.log("üîÑ Seats from API:", seats);
                renderSeatGrid(seats);
            } catch (error) {
                console.error('‚ùå L·ªói khi l·∫•y gh·∫ø ƒë√£ ƒë·∫∑t:', error);
            }
        }

                function renderSeatGrid(bookedSeats) {
            const seatGrid = document.getElementById('seatGrid');
            seatGrid.innerHTML = "";

            const leftCol = document.createElement('div');
            leftCol.classList.add('seat-column');

            const rightCol = document.createElement('div');
            rightCol.classList.add('seat-column');

        // ========== D√ÉY TR√ÅI ==========
        // ====== Th√™m ch·ªØ "T·∫ßng Tr√™n" cƒÉn gi·ªØa ======
        let upperLabel = document.createElement('div');
        upperLabel.innerText = "T·∫ßng Tr√™n";
        upperLabel.style.textAlign = "center";
        upperLabel.style.fontSize = "16px";
        upperLabel.style.fontWeight = "bold";
        upperLabel.style.margin = "10px 0";
        leftCol.appendChild(upperLabel);

        // ====== H√†ng ƒë·∫ßu c√≥ 2 gh·∫ø (1-2) v·ªõi kho·∫£ng tr·ªëng ·ªü gi·ªØa ======
        let seatNum = 1;
        let row = document.createElement('div');
        row.style.display = "flex";
        row.style.justifyContent = "space-between"; // cƒÉn ƒë·ªÅu 2 b√™n

        // gh·∫ø 1 b√™n tr√°i
        row.appendChild(createSeat(seatNum++, bookedSeats));

        // kho·∫£ng tr·ªëng gi·ªØa
        let space = document.createElement('div');
        space.style.width = "40px";
        row.appendChild(space);

        // gh·∫ø 2 b√™n ph·∫£i
        row.appendChild(createSeat(seatNum++, bookedSeats));

        leftCol.appendChild(row);

        // ====== C√°c h√†ng ti·∫øp theo: m·ªói h√†ng 3 gh·∫ø, cho t·ªõi khi ƒë·ªß 17 gh·∫ø ======
        while (seatNum <= 17) {
            row = document.createElement('div');
            row.style.display = "flex";
            row.style.gap = "40px";
            for (let i = 0; i < 3 && seatNum <= 17; i++) {
                row.appendChild(createSeat(seatNum++, bookedSeats));
            }
            leftCol.appendChild(row);
        }

        // ========== D√ÉY PH·∫¢I ==========
        // ====== Th√™m ch·ªØ "T·∫ßng D∆∞·ªõi" cƒÉn gi·ªØa ======
        let lowerLabel = document.createElement('div'); // ƒê·ªïi t√™n bi·∫øn kh√°c
        lowerLabel.innerText = "T·∫ßng D∆∞·ªõi";
        lowerLabel.style.textAlign = "center";
        lowerLabel.style.fontSize = "16px";
        lowerLabel.style.fontWeight = "bold";
        lowerLabel.style.margin = "10px 0";
        rightCol.appendChild(lowerLabel);

        // H√†ng ƒë·∫ßu b√™n ph·∫£i c√≥ 2 gh·∫ø (18-19) v·ªõi kho·∫£ng tr·ªëng gi·ªØa
        seatNum = 18;
        row = document.createElement('div');
        row.style.display = "flex";
        row.style.justifyContent = "space-between";

        // gh·∫ø 18 b√™n tr√°i
        row.appendChild(createSeat(seatNum++, bookedSeats));

        // kho·∫£ng tr·ªëng gi·ªØa
        let spaceRight = document.createElement('div');
        spaceRight.style.width = "40px";
        row.appendChild(spaceRight);

        // gh·∫ø 19 b√™n ph·∫£i
        row.appendChild(createSeat(seatNum++, bookedSeats));

        rightCol.appendChild(row);

        // C√°c h√†ng ti·∫øp theo: m·ªói h√†ng 3 gh·∫ø, cho t·ªõi khi ƒë·ªß 34 gh·∫ø
        while (seatNum <= 34) {
            row = document.createElement('div');
            row.style.display = "flex";
            row.style.gap = "40px";
            for (let i = 0; i < 3 && seatNum <= 34; i++) {
                row.appendChild(createSeat(seatNum++, bookedSeats));
            }
            rightCol.appendChild(row);
        }
            seatGrid.appendChild(leftCol);
            seatGrid.appendChild(rightCol);
        }

        function showSeatAlert(message) {
    const alertDiv = document.getElementById('seatAlert');
    document.getElementById('seatAlertMessage').textContent = message;
    alertDiv.style.display = 'block';
    
    setTimeout(() => {
        hideSeatAlert();
    }, 3000);
}

function hideSeatAlert() {
    const alertDiv = document.getElementById('seatAlert');
    alertDiv.style.display = 'none';
}

               function createSeat(seatNumber, seats) {
            const seat = document.createElement('div');
            seat.classList.add('seat');
            seat.textContent = seatNumber;
            seat.dataset.seatNumber = seatNumber;

            // t√¨m tr·∫°ng th√°i gh·∫ø t·ª´ API
            const seatInfo = seats.find(s => s.seatNumber === seatNumber);
            const status = seatInfo ? seatInfo.status : "available";
                   console.log(`Seat ${seatNumber}:`, status);

                    if (status === "Confirmed" || status === "Pending") {
                // booked & pending chung 1 m√†u
                seat.classList.add('booked');
                seat.style.cursor = "not-allowed";
            } else {
                seat.classList.add('available');
                seat.addEventListener('click', () => {
                    if (seat.classList.contains('selected')) {
                        seat.classList.remove('selected');
                        seat.classList.add('available');
                        selectedSeats = selectedSeats.filter(n => n !== seatNumber);
                    } else {
                        if (selectedSeats.length >= 5) {
                            showSeatAlert("B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 5 gh·∫ø!");
                            return;
                        }
                        seat.classList.remove('available');
                        seat.classList.add('selected');
                        selectedSeats.push(seatNumber);
                    }
                    updateHiddenInputs();
                    document.getElementById('submitButton').disabled = selectedSeats.length === 0;
                });
            }

            return seat;
        }


           function updateHiddenInputs() {
            const form = document.getElementById('bookingForm');
            form.querySelectorAll('input[name="seatNumbers"]').forEach(el => el.remove());
            selectedSeats.forEach(seatNumber => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'seatNumbers';
                input.value = seatNumber;
                form.appendChild(input);
            });

            // === C·∫≠p nh·∫≠t th√¥ng tin b√™n ph·∫£i ===
            document.getElementById('seatCount').textContent = selectedSeats.length;
            document.getElementById('seatList').textContent = selectedSeats.length > 0 ? selectedSeats.join(", ") : "-";

            let pricePerSeat = @Model.Price; // gi√° v√© 1 gh·∫ø
            let total = selectedSeats.length * pricePerSeat;

            // c·∫≠p nh·∫≠t t·ªïng ti·ªÅn l∆∞·ª£t ƒëi (card 1)
            document.getElementById('totalPriceTop').textContent = total.toLocaleString();

            // c·∫≠p nh·∫≠t gi√° v√© l∆∞·ª£t ƒëi (card 2) = gi·ªëng t·ªïng ti·ªÅn
            document.getElementById('totalPriceDetail').textContent = total.toLocaleString();

            // c·∫≠p nh·∫≠t t·ªïng ti·ªÅn (card 2)
            document.getElementById('totalPriceBottom').textContent = total.toLocaleString();
        }
                // Khi load l·∫ßn ƒë·∫ßu
        document.addEventListener("DOMContentLoaded", () => {
            console.log("DOMContentLoaded -> loadBookedSeats()");
            loadBookedSeats();
        });

        // Khi quay l·∫°i b·∫±ng n√∫t Back/Forward
        window.addEventListener("pageshow", function (event) {
            console.log("pageshow event fired. persisted =", event.persisted);

            // Lu√¥n g·ªçi l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn
            loadBookedSeats();
        });

    </script>
}
